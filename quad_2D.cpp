/* ---- Function definitions for 2D_quadrature class ---- */

#include "quad_2D.h"
#include </usr/include/eigen3/Eigen/Dense>
#include <iostream>

using namespace Eigen;
using namespace std;

/* Base class methods */
Quadrature_2D::Quadrature_2D(int p, int npts){
	
	ORDER = p;
	N_PTS = npts;
	
	WEIGHTS = new double[N_PTS];
	POINTS  = new double[2*N_PTS]; // [x1 y1 x2 y2 ...]

};

void Quadrature_2D::print(){

	cout << "---- 2D QUADRATURE ----" << endl << endl;
	cout << " Quad points:" << endl << "[ ";
	for (int n = 0; n < N_PTS; n++){
		cout << "( " << POINTS[2*n] << ", " << POINTS[2*n+1] << ") ";
	}
	cout << "]" << endl;

	cout << " Quad weights:" << endl << "( ";
	for (int n = 0; n < N_PTS; n++){
		cout << WEIGHTS[n] << " ";
	}
	cout << ")" << endl;

}

Quadrature_2D::~Quadrature_2D(){

	delete [] WEIGHTS; delete [] POINTS;

}

/* Tensor class methods */
Tensor::Tensor(Quadrature_1D *q): Quadrature_2D(q->ORDER, pow(q->N_PTS,2)){

	int r, s, n, npts;
	npts = q->N_PTS;

	for (s = 0; s < npts; s++){
		for (r = 0; r < npts; r++){

			n = s*npts + r;
			
			POINTS[2*n]   = q->POINTS[r];
			POINTS[2*n+1] = q->POINTS[s];
 
			WEIGHTS[n] = q->WEIGHTS[r] * q->WEIGHTS[s]; 
		
		}
	} 

}

/* Dunavant class methods */
Dunavant::Dunavant(int order): Quadrature_2D(order, get_npts(order)){

	Map < Matrix<double, 1, Dynamic> > p(POINTS, 2*N_PTS);
	Map < Matrix<double, 1, Dynamic> > w(WEIGHTS, N_PTS);
	
	switch (ORDER){
		case 0: 
			
		    	p << 0.33333333, 0.333333333;
			w << 0.50000000;

			break;

		case 1: 
		    	p <<  0.666666666666667, 0.166666666666667, 0.166666666666667, 	                              0.166666666666667, 0.166666666666667, 0.666666666666667;
			w <<  0.166666666666666, 0.166666666666666, 0.166666666666666;
	
			break;
		case 2: 
		    	p << 0.333333333333333, 0.333333333333333, 0.600000000000000, 
			     0.200000000000000, 0.200000000000000, 0.200000000000000, 
                             0.200000000000000, 0.600000000000000;
			w << -0.281250000000000, 0.260416666666667, 0.260416666666667,
                             0.260416666666667; 
		
			break;
		case 3: 
		    	p << 0.108103018168070, 0.445948490915965, 0.445948490915965,
			     0.445948490915965, 0.445948490915965, 0.108103018168070, 
			     0.816847572980459, 0.091576213509771, 0.091576213509771, 
			     0.091576213509771, 0.091576213509771, 0.816847572980459;
			w << 0.111690794839005, 0.111690794839005, 0.111690794839005,
			     0.054975871827661, 0.054975871827661, 0.054975871827661;
			
			break;
                case 4:
			p << 0.333333333333333, 0.333333333333333, 0.059715871789770,
			     0.470142064105115, 0.470142064105115, 0.470142064105115, 
			     0.470142064105115, 0.059715871789770, 0.797426985353087, 
			     0.101286507323456, 0.101286507323456, 0.101286507323456,
                             0.101286507323456, 0.797426985353087;
			w << 0.112500000000000, 0.066197076394253, 0.066197076394253, 
			     0.066197076394253, 0.062969590272414, 0.062969590272414, 
			     0.062969590272414;

			break;
		case 5:
			p << 0.501426509658179, 0.249286745170910, 0.249286745170910,
			     0.249286745170910, 0.249286745170910, 0.501426509658179, 
			     0.873821971016996, 0.063089014491502, 0.063089014491502, 
			     0.063089014491502, 0.063089014491502, 0.873821971016996,
 			     0.053145049844817, 0.310352451033784, 0.310352451033784, 
			     0.636502499121399, 0.636502499121399, 0.053145049844817, 
			     0.310352451033784, 0.053145049844817, 0.636502499121399, 
			     0.310352451033784, 0.053145049844817, 0.636502499121399;
			w << 0.058393137863189, 0.058393137863189, 0.058393137863189,
			     0.025422453185103, 0.025422453185103, 0.025422453185103, 
			     0.041425537809187, 0.041425537809187, 0.041425537809187, 
			     0.041425537809187, 0.041425537809187, 0.041425537809187;
			
			break;
		case 6:
			p << 0.333333333333333, 0.333333333333333, 0.479308067841920,  	  			     0.260345966079040, 0.260345966079040, 0.260345966079040, 				     0.260345966079040, 0.479308067841920, 0.869739794195568, 
			     0.065130102902216, 0.065130102902216, 0.065130102902216,
			     0.065130102902216, 0.869739794195568, 0.048690315425316, 
			     0.312865496004874, 0.312865496004874, 0.638444188569810, 
			     0.638444188569810, 0.048690315425316, 0.312865496004874, 
			     0.048690315425316, 0.638444188569810, 0.312865496004874,
    			     0.048690315425316, 0.638444188569810;
			w << -0.074785022233841, 0.087807628716604, 0.087807628716604,
			     0.087807628716604, 0.026673617804419, 0.026673617804419,
			     0.026673617804419, 0.038556880445128, 0.038556880445128, 
			     0.038556880445128, 0.038556880445128, 0.038556880445128,
                             0.038556880445128;
					
			break;
		case 7:
			p << 0.333333333333333, 0.333333333333333, 0.081414823414554, 
			     0.459292588292723, 0.459292588292723, 0.459292588292723, 
			     0.459292588292723, 0.081414823414554, 0.658861384496480, 
			     0.170569307751760, 0.170569307751760, 0.170569307751760,
			     0.170569307751760, 0.658861384496480, 0.898905543365938, 
			     0.050547228317031, 0.050547228317031, 0.050547228317031, 
			     0.050547228317031, 0.898905543365938, 0.008394777409958, 
			     0.263112829634638, 0.263112829634638, 0.728492392955404, 
			     0.728492392955404, 0.008394777409958, 0.263112829634638,
			     0.008394777409958, 0.728492392955404, 0.263112829634638,
			     0.008394777409958, 0.728492392955404;
			w << 0.072157803838894, 0.047545817133642, 0.047545817133642, 
			     0.047545817133642, 0.051608685267359, 0.051608685267359,
			     0.051608685267359, 0.016229248811599, 0.016229248811599, 
			     0.016229248811599, 0.013615157087217, 0.013615157087217,
    			     0.013615157087217, 0.013615157087217, 0.013615157087217, 
			     0.013615157087217;

			break;
		case 8:
			p << 0.333333333333333, 0.333333333333333, 0.020634961602525,
              	             0.489682519198738, 0.489682519198738, 0.489682519198738,
			     0.489682519198738, 0.020634961602525, 0.125820817014127, 
			     0.437089591492937, 0.437089591492937, 0.437089591492937,
    		             0.437089591492937, 0.125820817014127, 0.623592928761935, 
		             0.188203535619033, 0.188203535619033, 0.188203535619033, 
			     0.188203535619033, 0.623592928761935, 0.910540973211095, 
			     0.044729513394453, 0.044729513394453, 0.044729513394453,
 			     0.044729513394453, 0.910540973211095, 0.036838412054736, 
			     0.221962989160766, 0.221962989160766, 0.741198598784498, 
			     0.741198598784498, 0.036838412054736, 0.221962989160766, 
			     0.036838412054736, 0.741198598784498, 0.221962989160766,
			     0.036838412054736, 0.741198598784498;
			w << 0.048567898141400, 0.015667350113570, 0.015667350113570, 
			     0.015667350113570, 0.038913770502387, 0.038913770502387,
			     0.038913770502387, 0.039823869463605, 0.039823869463605, 
			     0.039823869463605, 0.012788837829349, 0.012788837829349,
			     0.012788837829349, 0.021641769688645, 0.021641769688645, 
			     0.021641769688645, 0.021641769688645, 0.021641769688645, 
			     0.021641769688645;
					
			break;
		case 9:
			p << 0.333333333333333, 0.333333333333333, 0.028844733232685,
			     0.485577633383657, 0.485577633383657, 0.485577633383657, 
			     0.485577633383657, 0.028844733232685, 0.781036849029926, 
			     0.109481575485037, 0.109481575485037, 0.109481575485037,
			     0.109481575485037, 0.781036849029926, 0.141707219414880, 
			     0.307939838764121, 0.307939838764121, 0.550352941820999, 
			     0.550352941820999, 0.141707219414880, 0.307939838764121, 
			     0.141707219414880, 0.550352941820999, 0.307939838764121,
			     0.141707219414880, 0.550352941820999, 0.025003534762686, 
			     0.246672560639903, 0.246672560639903, 0.728323904597411, 
			     0.728323904597411, 0.025003534762686, 0.246672560639903, 
			     0.025003534762686, 0.728323904597411, 0.246672560639903,
			     0.025003534762686, 0.728323904597411, 0.009540815400299, 
			     0.066803251012200, 0.066803251012200, 0.923655933587500, 
			     0.923655933587500, 0.009540815400299, 0.066803251012200, 
			     0.009540815400299, 0.923655933587500, 0.066803251012200,
			     0.009540815400299, 0.923655933587500;
			w << 0.045408995191377, 0.018362978878233, 0.018362978878233,
			     0.018362978878233, 0.022660529717764, 0.022660529717764, 
			     0.022660529717764, 0.036378958422710, 0.036378958422710, 
			     0.036378958422710, 0.036378958422710, 0.036378958422710,
			     0.036378958422710, 0.014163621265528, 0.014163621265528, 
			     0.014163621265528, 0.014163621265528, 0.014163621265528, 
			     0.014163621265528, 0.004710833481867, 0.004710833481867, 
			     0.004710833481867, 0.004710833481867, 0.004710833481867,
			     0.004710833481867;
		
			break;
	}

}

int Dunavant::get_npts(int order){

	int npts;
	switch (order){
		case 0:
			npts = 1;
			break;
		case 1: 
			npts = 3;
			break;
		case 2:
			npts = 4;
			break;
		case 3:
			npts = 6;
			break;
		case 4: 
			npts = 7;
			break;
		case 5:
			npts = 12;
			break;
		case 6:
			npts = 13;
			break;
		case 7:
			npts = 16;
			break;
		case 8:
			npts = 19;
			break;
		case 9:
			npts = 25;
			break;	
	}

	return npts;
}

