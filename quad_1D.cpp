/* ---- Function declarations for 1D quadrature class ---- */

#include "quad_1D.h"
#include </usr/include/eigen3/Eigen/Dense>
#include <iostream>

using namespace Eigen;
using namespace std;

/* Base class methods */
Quadrature_1D::Quadrature_1D(int npts)  {
	
	N_PTS = npts;
		
	WEIGHTS = new double[N_PTS];
	POINTS  = new double[N_PTS];
	
};

Quadrature_1D::~Quadrature_1D(){

	delete [] WEIGHTS; delete [] POINTS;

};

void Quadrature_1D::print(){

	cout << "---- 1D QUADRATURE ----" << endl << endl;
	cout << " Quad points:" << endl << "( ";
	for (int n = 0; n < N_PTS; n++){
		cout << POINTS[n] << " ";
	}
	cout << ")" << endl;

	cout << " Quad weights:" << endl << "( ";
	for (int n = 0; n < N_PTS; n++){
		cout << WEIGHTS[n] << " ";
	}
	cout << ")" << endl;

}

/* Gaussian quadrature methods */
Gauss::Gauss(int npts): Quadrature_1D(npts){

	ORDER = 2*N_PTS - 1;
	set_quad();

}

void Gauss::set_quad(){
	
	Map < Matrix<double, 1, Dynamic> > p(POINTS,  N_PTS);
	Map < Matrix<double, 1, Dynamic> > w(WEIGHTS, N_PTS);
	

	switch (N_PTS){
		case 1: 
		    	p << 0.; w << 2.; 
			break;
		case 2:
			p << -0.5773502691896257, 0.5773502691896257;
			w <<  1., 1.;
			break;
		case 3:
			p <<  0.0000000000000000,-0.7745966692414834, 
			      0.7745966692414834;
			w <<  0.8888888888888888, 0.5555555555555556, 
			      0.5555555555555556;  
		        break;
		case 4:
			p << -0.3399810435848563, 0.3399810435848563,
			     -0.8611363115940526, 0.8611363115940526;
			w <<  0.6521451548625461, 0.6521451548625461, 
			      0.3478548451374538, 0.3478548451374538;
			break;
		case 5:
			p <<  0.0000000000000000,-0.5384693101056831,
			      0.5384693101056831,-0.9061798459386640,
			      0.9061798459386640;
			w <<  0.5688888888888889, 0.4786286704993665, 
			      0.4786286704993665, 0.2369268850561891, 
			      0.2369268850561891;
			break;
		case 6: 
			p <<  0.6612093864662645,-0.6612093864662645,		
			     -0.2386191860831969, 0.2386191860831969,
			     -0.9324695142031521, 0.9324695142031521;
			w <<  0.3607615730481386, 0.3607615730481386,
			      0.4679139345726910, 0.4679139345726910, 
			      0.1713244923791704, 0.1713244923791704;
			break;
		case 7: 
			p <<  0.000000000000000,  0.4058451513773972,
			     -0.405845151377397, -0.7415311855993945,
			      0.741531185599394, -0.9491079123427585,
			      0.9491079123427585;
			w <<  0.4179591836734694, 0.3818300505051189, 
			      0.3818300505051189, 0.2797053914892766,
			      0.2797053914892766, 0.1294849661688697,
		     	      0.1294849661688697;
			break;
		case 8:
			p << -0.1834346424956498, 0.1834346424956498,
			     -0.5255324099163290, 0.5255324099163290,
			     -0.7966664774136267, 0.7966664774136267,
			     -0.9602898564975363, 0.9602898564975363;
			w <<  0.3626837833783620, 0.3626837833783620,
			      0.3137066458778873, 0.3137066458778873, 
			      0.2223810344533745, 0.2223810344533745,
			      0.1012285362903763, 0.1012285362903763;
			break;
		case 9: 
			p <<  0.0000000000000000,-0.8360311073266358,
			      0.8360311073266358,-0.9681602395076261,
			      0.9681602395076261,-0.3242534234038089,
			      0.3242534234038089,-0.6133714327005904, 
			      0.6133714327005904;
			w <<  0.3302393550012598, 0.1806481606948574, 
			      0.1806481606948574, 0.0812743883615744, 
			      0.0812743883615744, 0.3123470770400029,
 			      0.3123470770400029, 0.2606106964029354,	
			      0.2606106964029354;	
			break;
	}

}
